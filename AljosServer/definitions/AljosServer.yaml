paths:
  /Calificacions:
    post:
      tags:
        - Calificacion
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Calificacion.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Calificacion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Calificacion'
      deprecated: false
    put:
      tags:
        - Calificacion
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Calificacion.upsert__put_Calificacions
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Calificacion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Calificacion'
      deprecated: false
    patch:
      tags:
        - Calificacion
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Calificacion.upsert__patch_Calificacions
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Calificacion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Calificacion'
      deprecated: false
    get:
      tags:
        - Calificacion
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Calificacion.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Calificacion'
      deprecated: false
  /Calificacions/replaceOrCreate:
    post:
      tags:
        - Calificacion
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Calificacion.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Calificacion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Calificacion'
      deprecated: false
  /Calificacions/upsertWithWhere:
    post:
      tags:
        - Calificacion
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Calificacion.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Calificacion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Calificacion'
      deprecated: false
  '/Calificacions/{id}/exists':
    get:
      tags:
        - Calificacion
      summary: Check whether a model instance exists in the data source.
      operationId: 'Calificacion.exists__get_Calificacions_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Calificacions/{id}':
    head:
      tags:
        - Calificacion
      summary: Check whether a model instance exists in the data source.
      operationId: 'Calificacion.exists__head_Calificacions_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Calificacion
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Calificacion.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Calificacion'
      deprecated: false
    delete:
      tags:
        - Calificacion
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Calificacion.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Calificacion
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Calificacion.prototype.updateAttributes__put_Calificacions_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Calificacion'
        - name: id
          in: path
          description: Calificacion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Calificacion'
      deprecated: false
    patch:
      tags:
        - Calificacion
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Calificacion.prototype.updateAttributes__patch_Calificacions_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Calificacion'
        - name: id
          in: path
          description: Calificacion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Calificacion'
      deprecated: false
  '/Calificacions/{id}/replace':
    post:
      tags:
        - Calificacion
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Calificacion.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Calificacion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Calificacion'
      deprecated: false
  /Calificacions/findOne:
    get:
      tags:
        - Calificacion
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Calificacion.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Calificacion'
      deprecated: false
  /Calificacions/update:
    post:
      tags:
        - Calificacion
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Calificacion.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Calificacion'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Calificacions/count:
    get:
      tags:
        - Calificacion
      summary: Count instances of the model matched by where from the data source.
      operationId: Calificacion.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Cotizacions:
    post:
      tags:
        - Cotizacion
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Cotizacion.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Cotizacion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cotizacion'
      deprecated: false
    put:
      tags:
        - Cotizacion
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Cotizacion.upsert__put_Cotizacions
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Cotizacion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cotizacion'
      deprecated: false
    patch:
      tags:
        - Cotizacion
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Cotizacion.upsert__patch_Cotizacions
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Cotizacion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cotizacion'
      deprecated: false
    get:
      tags:
        - Cotizacion
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Cotizacion.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Cotizacion'
      deprecated: false
  /Cotizacions/replaceOrCreate:
    post:
      tags:
        - Cotizacion
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Cotizacion.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Cotizacion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cotizacion'
      deprecated: false
  /Cotizacions/upsertWithWhere:
    post:
      tags:
        - Cotizacion
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Cotizacion.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Cotizacion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cotizacion'
      deprecated: false
  '/Cotizacions/{id}/exists':
    get:
      tags:
        - Cotizacion
      summary: Check whether a model instance exists in the data source.
      operationId: 'Cotizacion.exists__get_Cotizacions_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Cotizacions/{id}':
    head:
      tags:
        - Cotizacion
      summary: Check whether a model instance exists in the data source.
      operationId: 'Cotizacion.exists__head_Cotizacions_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Cotizacion
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Cotizacion.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cotizacion'
      deprecated: false
    delete:
      tags:
        - Cotizacion
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Cotizacion.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Cotizacion
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Cotizacion.prototype.updateAttributes__put_Cotizacions_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Cotizacion'
        - name: id
          in: path
          description: Cotizacion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cotizacion'
      deprecated: false
    patch:
      tags:
        - Cotizacion
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Cotizacion.prototype.updateAttributes__patch_Cotizacions_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Cotizacion'
        - name: id
          in: path
          description: Cotizacion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cotizacion'
      deprecated: false
  '/Cotizacions/{id}/replace':
    post:
      tags:
        - Cotizacion
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Cotizacion.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Cotizacion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cotizacion'
      deprecated: false
  /Cotizacions/findOne:
    get:
      tags:
        - Cotizacion
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Cotizacion.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Cotizacion'
      deprecated: false
  /Cotizacions/update:
    post:
      tags:
        - Cotizacion
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Cotizacion.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Cotizacion'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Cotizacions/count:
    get:
      tags:
        - Cotizacion
      summary: Count instances of the model matched by where from the data source.
      operationId: Cotizacion.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Encuesta:
    post:
      tags:
        - Encuesta
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Encuesta.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Encuesta'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Encuesta'
      deprecated: false
    put:
      tags:
        - Encuesta
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Encuesta.upsert__put_Encuesta
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Encuesta'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Encuesta'
      deprecated: false
    patch:
      tags:
        - Encuesta
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Encuesta.upsert__patch_Encuesta
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Encuesta'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Encuesta'
      deprecated: false
    get:
      tags:
        - Encuesta
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Encuesta.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Encuesta'
      deprecated: false
  /Encuesta/replaceOrCreate:
    post:
      tags:
        - Encuesta
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Encuesta.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Encuesta'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Encuesta'
      deprecated: false
  /Encuesta/upsertWithWhere:
    post:
      tags:
        - Encuesta
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Encuesta.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Encuesta'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Encuesta'
      deprecated: false
  '/Encuesta/{id}/exists':
    get:
      tags:
        - Encuesta
      summary: Check whether a model instance exists in the data source.
      operationId: 'Encuesta.exists__get_Encuesta_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Encuesta/{id}':
    head:
      tags:
        - Encuesta
      summary: Check whether a model instance exists in the data source.
      operationId: 'Encuesta.exists__head_Encuesta_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Encuesta
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Encuesta.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Encuesta'
      deprecated: false
    delete:
      tags:
        - Encuesta
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Encuesta.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Encuesta
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Encuesta.prototype.updateAttributes__put_Encuesta_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Encuesta'
        - name: id
          in: path
          description: Encuesta id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Encuesta'
      deprecated: false
    patch:
      tags:
        - Encuesta
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Encuesta.prototype.updateAttributes__patch_Encuesta_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Encuesta'
        - name: id
          in: path
          description: Encuesta id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Encuesta'
      deprecated: false
  '/Encuesta/{id}/replace':
    post:
      tags:
        - Encuesta
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Encuesta.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Encuesta'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Encuesta'
      deprecated: false
  /Encuesta/findOne:
    get:
      tags:
        - Encuesta
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Encuesta.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Encuesta'
      deprecated: false
  /Encuesta/update:
    post:
      tags:
        - Encuesta
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Encuesta.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Encuesta'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Encuesta/count:
    get:
      tags:
        - Encuesta
      summary: Count instances of the model matched by where from the data source.
      operationId: Encuesta.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Empresas:
    post:
      tags:
        - Empresa
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Empresa.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Empresa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Empresa'
      deprecated: false
    put:
      tags:
        - Empresa
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Empresa.upsert__put_Empresas
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Empresa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Empresa'
      deprecated: false
    patch:
      tags:
        - Empresa
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Empresa.upsert__patch_Empresas
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Empresa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Empresa'
      deprecated: false
    get:
      tags:
        - Empresa
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Empresa.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Empresa'
      deprecated: false
  /Empresas/replaceOrCreate:
    post:
      tags:
        - Empresa
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Empresa.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Empresa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Empresa'
      deprecated: false
  /Empresas/upsertWithWhere:
    post:
      tags:
        - Empresa
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Empresa.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Empresa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Empresa'
      deprecated: false
  '/Empresas/{id}/exists':
    get:
      tags:
        - Empresa
      summary: Check whether a model instance exists in the data source.
      operationId: 'Empresa.exists__get_Empresas_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Empresas/{id}':
    head:
      tags:
        - Empresa
      summary: Check whether a model instance exists in the data source.
      operationId: 'Empresa.exists__head_Empresas_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Empresa
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Empresa.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Empresa'
      deprecated: false
    delete:
      tags:
        - Empresa
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Empresa.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Empresa
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Empresa.prototype.updateAttributes__put_Empresas_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Empresa'
        - name: id
          in: path
          description: Empresa id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Empresa'
      deprecated: false
    patch:
      tags:
        - Empresa
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Empresa.prototype.updateAttributes__patch_Empresas_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Empresa'
        - name: id
          in: path
          description: Empresa id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Empresa'
      deprecated: false
  '/Empresas/{id}/replace':
    post:
      tags:
        - Empresa
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Empresa.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Empresa'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Empresa'
      deprecated: false
  /Empresas/findOne:
    get:
      tags:
        - Empresa
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Empresa.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Empresa'
      deprecated: false
  /Empresas/update:
    post:
      tags:
        - Empresa
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Empresa.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Empresa'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Empresas/count:
    get:
      tags:
        - Empresa
      summary: Count instances of the model matched by where from the data source.
      operationId: Empresa.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Favoritos:
    post:
      tags:
        - Favorito
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Favorito.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Favorito'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Favorito'
      deprecated: false
    put:
      tags:
        - Favorito
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Favorito.upsert__put_Favoritos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Favorito'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Favorito'
      deprecated: false
    patch:
      tags:
        - Favorito
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Favorito.upsert__patch_Favoritos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Favorito'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Favorito'
      deprecated: false
    get:
      tags:
        - Favorito
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Favorito.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Favorito'
      deprecated: false
  /Favoritos/replaceOrCreate:
    post:
      tags:
        - Favorito
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Favorito.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Favorito'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Favorito'
      deprecated: false
  /Favoritos/upsertWithWhere:
    post:
      tags:
        - Favorito
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Favorito.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Favorito'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Favorito'
      deprecated: false
  '/Favoritos/{id}/exists':
    get:
      tags:
        - Favorito
      summary: Check whether a model instance exists in the data source.
      operationId: 'Favorito.exists__get_Favoritos_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Favoritos/{id}':
    head:
      tags:
        - Favorito
      summary: Check whether a model instance exists in the data source.
      operationId: 'Favorito.exists__head_Favoritos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Favorito
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Favorito.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Favorito'
      deprecated: false
    delete:
      tags:
        - Favorito
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Favorito.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Favorito
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Favorito.prototype.updateAttributes__put_Favoritos_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Favorito'
        - name: id
          in: path
          description: Favorito id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Favorito'
      deprecated: false
    patch:
      tags:
        - Favorito
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Favorito.prototype.updateAttributes__patch_Favoritos_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Favorito'
        - name: id
          in: path
          description: Favorito id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Favorito'
      deprecated: false
  '/Favoritos/{id}/replace':
    post:
      tags:
        - Favorito
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Favorito.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Favorito'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Favorito'
      deprecated: false
  /Favoritos/findOne:
    get:
      tags:
        - Favorito
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Favorito.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Favorito'
      deprecated: false
  /Favoritos/update:
    post:
      tags:
        - Favorito
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Favorito.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Favorito'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Favoritos/count:
    get:
      tags:
        - Favorito
      summary: Count instances of the model matched by where from the data source.
      operationId: Favorito.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Imagens:
    post:
      tags:
        - Imagen
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Imagen.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Imagen'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Imagen'
      deprecated: false
    put:
      tags:
        - Imagen
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Imagen.upsert__put_Imagens
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Imagen'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Imagen'
      deprecated: false
    patch:
      tags:
        - Imagen
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Imagen.upsert__patch_Imagens
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Imagen'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Imagen'
      deprecated: false
    get:
      tags:
        - Imagen
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Imagen.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Imagen'
      deprecated: false
  /Imagens/replaceOrCreate:
    post:
      tags:
        - Imagen
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Imagen.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Imagen'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Imagen'
      deprecated: false
  /Imagens/upsertWithWhere:
    post:
      tags:
        - Imagen
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Imagen.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Imagen'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Imagen'
      deprecated: false
  '/Imagens/{id}/exists':
    get:
      tags:
        - Imagen
      summary: Check whether a model instance exists in the data source.
      operationId: 'Imagen.exists__get_Imagens_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Imagens/{id}':
    head:
      tags:
        - Imagen
      summary: Check whether a model instance exists in the data source.
      operationId: 'Imagen.exists__head_Imagens_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Imagen
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Imagen.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Imagen'
      deprecated: false
    delete:
      tags:
        - Imagen
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Imagen.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Imagen
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Imagen.prototype.updateAttributes__put_Imagens_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Imagen'
        - name: id
          in: path
          description: Imagen id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Imagen'
      deprecated: false
    patch:
      tags:
        - Imagen
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Imagen.prototype.updateAttributes__patch_Imagens_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Imagen'
        - name: id
          in: path
          description: Imagen id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Imagen'
      deprecated: false
  '/Imagens/{id}/replace':
    post:
      tags:
        - Imagen
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Imagen.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Imagen'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Imagen'
      deprecated: false
  /Imagens/findOne:
    get:
      tags:
        - Imagen
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Imagen.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Imagen'
      deprecated: false
  /Imagens/update:
    post:
      tags:
        - Imagen
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Imagen.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Imagen'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Imagens/count:
    get:
      tags:
        - Imagen
      summary: Count instances of the model matched by where from the data source.
      operationId: Imagen.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Pagos:
    post:
      tags:
        - Pago
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Pago.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pago'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pago'
      deprecated: false
    put:
      tags:
        - Pago
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Pago.upsert__put_Pagos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pago'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pago'
      deprecated: false
    patch:
      tags:
        - Pago
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Pago.upsert__patch_Pagos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pago'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pago'
      deprecated: false
    get:
      tags:
        - Pago
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Pago.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Pago'
      deprecated: false
  /Pagos/replaceOrCreate:
    post:
      tags:
        - Pago
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Pago.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pago'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pago'
      deprecated: false
  /Pagos/upsertWithWhere:
    post:
      tags:
        - Pago
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Pago.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Pago'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pago'
      deprecated: false
  '/Pagos/{id}/exists':
    get:
      tags:
        - Pago
      summary: Check whether a model instance exists in the data source.
      operationId: 'Pago.exists__get_Pagos_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Pagos/{id}':
    head:
      tags:
        - Pago
      summary: Check whether a model instance exists in the data source.
      operationId: 'Pago.exists__head_Pagos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Pago
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Pago.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pago'
      deprecated: false
    delete:
      tags:
        - Pago
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Pago.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Pago
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Pago.prototype.updateAttributes__put_Pagos_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Pago'
        - name: id
          in: path
          description: Pago id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pago'
      deprecated: false
    patch:
      tags:
        - Pago
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Pago.prototype.updateAttributes__patch_Pagos_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Pago'
        - name: id
          in: path
          description: Pago id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pago'
      deprecated: false
  '/Pagos/{id}/replace':
    post:
      tags:
        - Pago
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Pago.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pago'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pago'
      deprecated: false
  /Pagos/findOne:
    get:
      tags:
        - Pago
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Pago.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pago'
      deprecated: false
  /Pagos/update:
    post:
      tags:
        - Pago
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Pago.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Pago'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Pagos/count:
    get:
      tags:
        - Pago
      summary: Count instances of the model matched by where from the data source.
      operationId: Pago.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Pregunta:
    post:
      tags:
        - Pregunta
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Pregunta.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pregunta'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pregunta'
      deprecated: false
    put:
      tags:
        - Pregunta
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Pregunta.upsert__put_Pregunta
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pregunta'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pregunta'
      deprecated: false
    patch:
      tags:
        - Pregunta
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Pregunta.upsert__patch_Pregunta
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pregunta'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pregunta'
      deprecated: false
    get:
      tags:
        - Pregunta
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Pregunta.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Pregunta'
      deprecated: false
  /Pregunta/replaceOrCreate:
    post:
      tags:
        - Pregunta
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Pregunta.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pregunta'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pregunta'
      deprecated: false
  /Pregunta/upsertWithWhere:
    post:
      tags:
        - Pregunta
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Pregunta.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Pregunta'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pregunta'
      deprecated: false
  '/Pregunta/{id}/exists':
    get:
      tags:
        - Pregunta
      summary: Check whether a model instance exists in the data source.
      operationId: 'Pregunta.exists__get_Pregunta_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Pregunta/{id}':
    head:
      tags:
        - Pregunta
      summary: Check whether a model instance exists in the data source.
      operationId: 'Pregunta.exists__head_Pregunta_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Pregunta
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Pregunta.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pregunta'
      deprecated: false
    delete:
      tags:
        - Pregunta
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Pregunta.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Pregunta
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Pregunta.prototype.updateAttributes__put_Pregunta_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Pregunta'
        - name: id
          in: path
          description: Pregunta id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pregunta'
      deprecated: false
    patch:
      tags:
        - Pregunta
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Pregunta.prototype.updateAttributes__patch_Pregunta_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Pregunta'
        - name: id
          in: path
          description: Pregunta id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pregunta'
      deprecated: false
  '/Pregunta/{id}/replace':
    post:
      tags:
        - Pregunta
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Pregunta.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pregunta'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pregunta'
      deprecated: false
  /Pregunta/findOne:
    get:
      tags:
        - Pregunta
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Pregunta.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pregunta'
      deprecated: false
  /Pregunta/update:
    post:
      tags:
        - Pregunta
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Pregunta.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Pregunta'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Pregunta/count:
    get:
      tags:
        - Pregunta
      summary: Count instances of the model matched by where from the data source.
      operationId: Pregunta.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Productoservicios:
    post:
      tags:
        - Productoservicio
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Productoservicio.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Productoservicio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Productoservicio'
      deprecated: false
    put:
      tags:
        - Productoservicio
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Productoservicio.upsert__put_Productoservicios
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Productoservicio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Productoservicio'
      deprecated: false
    patch:
      tags:
        - Productoservicio
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Productoservicio.upsert__patch_Productoservicios
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Productoservicio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Productoservicio'
      deprecated: false
    get:
      tags:
        - Productoservicio
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Productoservicio.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Productoservicio'
      deprecated: false
  /Productoservicios/replaceOrCreate:
    post:
      tags:
        - Productoservicio
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Productoservicio.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Productoservicio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Productoservicio'
      deprecated: false
  /Productoservicios/upsertWithWhere:
    post:
      tags:
        - Productoservicio
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Productoservicio.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Productoservicio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Productoservicio'
      deprecated: false
  '/Productoservicios/{id}/exists':
    get:
      tags:
        - Productoservicio
      summary: Check whether a model instance exists in the data source.
      operationId: 'Productoservicio.exists__get_Productoservicios_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Productoservicios/{id}':
    head:
      tags:
        - Productoservicio
      summary: Check whether a model instance exists in the data source.
      operationId: 'Productoservicio.exists__head_Productoservicios_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Productoservicio
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Productoservicio.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Productoservicio'
      deprecated: false
    delete:
      tags:
        - Productoservicio
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Productoservicio.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Productoservicio
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Productoservicio.prototype.updateAttributes__put_Productoservicios_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Productoservicio'
        - name: id
          in: path
          description: Productoservicio id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Productoservicio'
      deprecated: false
    patch:
      tags:
        - Productoservicio
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Productoservicio.prototype.updateAttributes__patch_Productoservicios_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Productoservicio'
        - name: id
          in: path
          description: Productoservicio id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Productoservicio'
      deprecated: false
  '/Productoservicios/{id}/replace':
    post:
      tags:
        - Productoservicio
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Productoservicio.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Productoservicio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Productoservicio'
      deprecated: false
  /Productoservicios/findOne:
    get:
      tags:
        - Productoservicio
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Productoservicio.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Productoservicio'
      deprecated: false
  /Productoservicios/update:
    post:
      tags:
        - Productoservicio
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Productoservicio.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Productoservicio'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Productoservicios/count:
    get:
      tags:
        - Productoservicio
      summary: Count instances of the model matched by where from the data source.
      operationId: Productoservicio.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Publicacions:
    post:
      tags:
        - Publicacion
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Publicacion.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Publicacion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Publicacion'
      deprecated: false
    put:
      tags:
        - Publicacion
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Publicacion.upsert__put_Publicacions
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Publicacion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Publicacion'
      deprecated: false
    patch:
      tags:
        - Publicacion
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Publicacion.upsert__patch_Publicacions
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Publicacion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Publicacion'
      deprecated: false
    get:
      tags:
        - Publicacion
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Publicacion.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Publicacion'
      deprecated: false
  /Publicacions/replaceOrCreate:
    post:
      tags:
        - Publicacion
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Publicacion.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Publicacion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Publicacion'
      deprecated: false
  /Publicacions/upsertWithWhere:
    post:
      tags:
        - Publicacion
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Publicacion.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Publicacion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Publicacion'
      deprecated: false
  '/Publicacions/{id}/exists':
    get:
      tags:
        - Publicacion
      summary: Check whether a model instance exists in the data source.
      operationId: 'Publicacion.exists__get_Publicacions_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Publicacions/{id}':
    head:
      tags:
        - Publicacion
      summary: Check whether a model instance exists in the data source.
      operationId: 'Publicacion.exists__head_Publicacions_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Publicacion
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Publicacion.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Publicacion'
      deprecated: false
    delete:
      tags:
        - Publicacion
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Publicacion.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Publicacion
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Publicacion.prototype.updateAttributes__put_Publicacions_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Publicacion'
        - name: id
          in: path
          description: Publicacion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Publicacion'
      deprecated: false
    patch:
      tags:
        - Publicacion
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Publicacion.prototype.updateAttributes__patch_Publicacions_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Publicacion'
        - name: id
          in: path
          description: Publicacion id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Publicacion'
      deprecated: false
  '/Publicacions/{id}/replace':
    post:
      tags:
        - Publicacion
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Publicacion.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Publicacion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Publicacion'
      deprecated: false
  /Publicacions/findOne:
    get:
      tags:
        - Publicacion
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Publicacion.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Publicacion'
      deprecated: false
  /Publicacions/update:
    post:
      tags:
        - Publicacion
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Publicacion.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Publicacion'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Publicacions/count:
    get:
      tags:
        - Publicacion
      summary: Count instances of the model matched by where from the data source.
      operationId: Publicacion.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Visita:
    post:
      tags:
        - Visita
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Visita.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Visita'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Visita'
      deprecated: false
    put:
      tags:
        - Visita
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Visita.upsert__put_Visita
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Visita'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Visita'
      deprecated: false
    patch:
      tags:
        - Visita
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Visita.upsert__patch_Visita
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Visita'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Visita'
      deprecated: false
    get:
      tags:
        - Visita
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Visita.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Visita'
      deprecated: false
  /Visita/replaceOrCreate:
    post:
      tags:
        - Visita
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Visita.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Visita'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Visita'
      deprecated: false
  /Visita/upsertWithWhere:
    post:
      tags:
        - Visita
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Visita.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Visita'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Visita'
      deprecated: false
  '/Visita/{id}/exists':
    get:
      tags:
        - Visita
      summary: Check whether a model instance exists in the data source.
      operationId: 'Visita.exists__get_Visita_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Visita/{id}':
    head:
      tags:
        - Visita
      summary: Check whether a model instance exists in the data source.
      operationId: 'Visita.exists__head_Visita_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Visita
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Visita.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Visita'
      deprecated: false
    delete:
      tags:
        - Visita
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Visita.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Visita
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Visita.prototype.updateAttributes__put_Visita_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Visita'
        - name: id
          in: path
          description: Visita id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Visita'
      deprecated: false
    patch:
      tags:
        - Visita
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Visita.prototype.updateAttributes__patch_Visita_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Visita'
        - name: id
          in: path
          description: Visita id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Visita'
      deprecated: false
  '/Visita/{id}/replace':
    post:
      tags:
        - Visita
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Visita.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Visita'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Visita'
      deprecated: false
  /Visita/findOne:
    get:
      tags:
        - Visita
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Visita.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Visita'
      deprecated: false
  /Visita/update:
    post:
      tags:
        - Visita
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Visita.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Visita'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Visita/count:
    get:
      tags:
        - Visita
      summary: Count instances of the model matched by where from the data source.
      operationId: Visita.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Tipousuarios:
    post:
      tags:
        - Tipousuario
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Tipousuario.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Tipousuario'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Tipousuario'
      deprecated: false
    put:
      tags:
        - Tipousuario
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Tipousuario.upsert__put_Tipousuarios
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Tipousuario'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Tipousuario'
      deprecated: false
    patch:
      tags:
        - Tipousuario
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Tipousuario.upsert__patch_Tipousuarios
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Tipousuario'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Tipousuario'
      deprecated: false
    get:
      tags:
        - Tipousuario
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Tipousuario.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Tipousuario'
      deprecated: false
  /Tipousuarios/replaceOrCreate:
    post:
      tags:
        - Tipousuario
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Tipousuario.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Tipousuario'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Tipousuario'
      deprecated: false
  /Tipousuarios/upsertWithWhere:
    post:
      tags:
        - Tipousuario
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Tipousuario.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Tipousuario'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Tipousuario'
      deprecated: false
  '/Tipousuarios/{id}/exists':
    get:
      tags:
        - Tipousuario
      summary: Check whether a model instance exists in the data source.
      operationId: 'Tipousuario.exists__get_Tipousuarios_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Tipousuarios/{id}':
    head:
      tags:
        - Tipousuario
      summary: Check whether a model instance exists in the data source.
      operationId: 'Tipousuario.exists__head_Tipousuarios_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Tipousuario
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Tipousuario.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Tipousuario'
      deprecated: false
    delete:
      tags:
        - Tipousuario
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Tipousuario.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Tipousuario
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Tipousuario.prototype.updateAttributes__put_Tipousuarios_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Tipousuario'
        - name: id
          in: path
          description: Tipousuario id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Tipousuario'
      deprecated: false
    patch:
      tags:
        - Tipousuario
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Tipousuario.prototype.updateAttributes__patch_Tipousuarios_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Tipousuario'
        - name: id
          in: path
          description: Tipousuario id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Tipousuario'
      deprecated: false
  '/Tipousuarios/{id}/replace':
    post:
      tags:
        - Tipousuario
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Tipousuario.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Tipousuario'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Tipousuario'
      deprecated: false
  /Tipousuarios/findOne:
    get:
      tags:
        - Tipousuario
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Tipousuario.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Tipousuario'
      deprecated: false
  /Tipousuarios/update:
    post:
      tags:
        - Tipousuario
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Tipousuario.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Tipousuario'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Tipousuarios/count:
    get:
      tags:
        - Tipousuario
      summary: Count instances of the model matched by where from the data source.
      operationId: Tipousuario.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Locals:
    post:
      tags:
        - Local
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Local.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Local'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Local'
      deprecated: false
    put:
      tags:
        - Local
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Local.upsert__put_Locals
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Local'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Local'
      deprecated: false
    patch:
      tags:
        - Local
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Local.upsert__patch_Locals
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Local'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Local'
      deprecated: false
    get:
      tags:
        - Local
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Local.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Local'
      deprecated: false
  /Locals/replaceOrCreate:
    post:
      tags:
        - Local
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Local.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Local'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Local'
      deprecated: false
  /Locals/upsertWithWhere:
    post:
      tags:
        - Local
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Local.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Local'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Local'
      deprecated: false
  '/Locals/{id}/exists':
    get:
      tags:
        - Local
      summary: Check whether a model instance exists in the data source.
      operationId: 'Local.exists__get_Locals_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Locals/{id}':
    head:
      tags:
        - Local
      summary: Check whether a model instance exists in the data source.
      operationId: 'Local.exists__head_Locals_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Local
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Local.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Local'
      deprecated: false
    delete:
      tags:
        - Local
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Local.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Local
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Local.prototype.updateAttributes__put_Locals_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Local'
        - name: id
          in: path
          description: Local id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Local'
      deprecated: false
    patch:
      tags:
        - Local
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Local.prototype.updateAttributes__patch_Locals_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Local'
        - name: id
          in: path
          description: Local id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Local'
      deprecated: false
  '/Locals/{id}/replace':
    post:
      tags:
        - Local
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Local.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Local'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Local'
      deprecated: false
  /Locals/findOne:
    get:
      tags:
        - Local
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Local.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Local'
      deprecated: false
  /Locals/update:
    post:
      tags:
        - Local
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Local.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Local'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Locals/count:
    get:
      tags:
        - Local
      summary: Count instances of the model matched by where from the data source.
      operationId: Local.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  Calificacion:
    properties:
      id:
        type: number
        format: double
      idpublicacion:
        type: number
        format: double
      idusuario:
        type: number
        format: double
      fecha:
        type: string
        format: date-time
      descripcion:
        maxLength: 400
        type: string
      calificacion:
        type: number
        format: double
      tipo:
        maxLength: 45
        type: string
    required:
      - id
      - idpublicacion
      - idusuario
      - fecha
      - descripcion
      - calificacion
      - tipo
    additionalProperties: false
  x-any:
    properties: {}
  Cotizacion:
    properties:
      id:
        type: number
        format: double
      idempresa:
        type: number
        format: double
      idpublicacion:
        type: number
        format: double
      idusuario:
        type: number
        format: double
      fecha:
        type: string
        format: date-time
      total:
        type: number
        format: double
      estado:
        maxLength: 45
        type: string
    required:
      - id
      - idempresa
      - idpublicacion
      - idusuario
      - fecha
      - total
      - estado
    additionalProperties: false
  Encuesta:
    properties:
      id:
        type: number
        format: double
      pregunta:
        maxLength: 100
        type: string
      encuestacol:
        maxLength: 100
        type: string
      numeroencuesta:
        type: number
        format: double
      usuarioId:
        type: number
        format: double
    required:
      - id
      - pregunta
      - encuestacol
      - numeroencuesta
      - usuarioId
    additionalProperties: false
  Empresa:
    properties:
      id:
        type: number
        format: double
      idusuario:
        type: number
        format: double
      nombre:
        maxLength: 25
        type: string
      rut:
        maxLength: 11
        type: string
      paginaweb:
        maxLength: 25
        type: string
      correo:
        maxLength: 30
        type: string
      fecha:
        type: string
        format: date-time
      advertencias:
        type: number
        format: double
    required:
      - id
      - idusuario
      - nombre
      - rut
      - paginaweb
      - correo
      - fecha
      - advertencias
    additionalProperties: false
  Favorito:
    properties:
      id:
        type: number
        format: double
      idusuario:
        type: number
        format: double
      idpublicacion:
        type: number
        format: double
      idempresa:
        type: number
        format: double
      fecha:
        type: string
        format: date-time
    required:
      - id
      - idusuario
      - idpublicacion
      - idempresa
      - fecha
    additionalProperties: false
  Imagen:
    properties:
      id:
        type: number
        format: double
      idpublicacion:
        type: number
        format: double
      idusuario:
        type: number
        format: double
      ruta:
        maxLength: 400
        type: string
      fecha:
        type: string
        format: date-time
    required:
      - id
      - ruta
      - fecha
    additionalProperties: false
  Pago:
    properties:
      id:
        type: number
        format: double
      estado:
        maxLength: 45
        type: string
      usuarioId:
        type: number
        format: double
      cotizacionId:
        type: number
        format: double
    required:
      - id
      - estado
      - usuarioId
      - cotizacionId
    additionalProperties: false
  Pregunta:
    properties:
      id:
        type: number
        format: double
      idempresa:
        type: number
        format: double
      pregunta:
        maxLength: 100
        type: string
      respuesta:
        maxLength: 100
        type: string
    required:
      - id
      - idempresa
      - pregunta
      - respuesta
    additionalProperties: false
  Productoservicio:
    properties:
      id:
        type: number
        format: double
      nombre:
        maxLength: 50
        type: string
      precio:
        type: number
        format: double
      idlocal:
        type: number
        format: double
      menu:
        type: number
        format: double
    required:
      - id
      - nombre
      - precio
      - menu
    additionalProperties: false
  Publicacion:
    properties:
      id:
        type: number
        format: double
      idempresa:
        type: number
        format: double
      fecha:
        type: string
        format: date-time
      descripcion:
        maxLength: 400
        type: string
      idproducto:
        type: number
        format: double
      cantidad:
        type: number
        format: double
    required:
      - id
      - idempresa
      - fecha
      - descripcion
      - idproducto
      - cantidad
    additionalProperties: false
  Visita:
    properties:
      id:
        type: number
        format: double
      idpublicacion:
        type: number
        format: double
      idusuario:
        type: number
        format: double
      fecha:
        type: string
        format: date-time
      cantidad:
        type: number
        format: double
    required:
      - id
      - idpublicacion
      - idusuario
      - fecha
      - cantidad
    additionalProperties: false
  Tipousuario:
    properties:
      id:
        type: number
        format: double
      tipo:
        maxLength: 45
        type: string
    required:
      - id
      - tipo
    additionalProperties: false
  Local:
    properties:
      id:
        type: number
        format: double
      direccion:
        maxLength: 80
        type: string
      numeracion:
        type: number
        format: double
      ciudad:
        maxLength: 50
        type: string
      comuna:
        maxLength: 50
        type: string
      tamanorecinto:
        type: number
        format: double
      incluyepatio:
        type: number
        format: double
      tamanopatio:
        type: number
        format: double
      incluyecocina:
        type: number
        format: double
      fecha:
        type: string
        format: date-time
    required:
      - id
      - direccion
      - numeracion
      - ciudad
      - comuna
      - tamanorecinto
      - incluyepatio
      - tamanopatio
      - incluyecocina
      - fecha
    additionalProperties: false
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: aljosserver
  version: 1.0.0
  title: AljosServer
schemes:
  - http
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
